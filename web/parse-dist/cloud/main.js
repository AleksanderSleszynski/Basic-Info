// Generated by IcedCoffeeScript 108.0.9
var app, async, crypto, express, getHash, updaters;

express = require('express');

crypto = require('crypto');

async = require('cloud/async.js');

app = express();

app.use(express.badyParser());

getHash = function(string) {
  return crypto.createHash('sha256').update('' + string).digest('hex').substring(0, 8);
};

app.get('/:id', function(req, res) {
  var id, key, o;
  o = {};
  id = (req.params.id || '').toLowerCase();
  key = '';
  if (id === 'meedamian' || id === 666) {
    key = 666;
    o = {
      vanity: 'meeDamian',
      phone: '+886 909 377 026',
      location: {
        country: 'Taiwan',
        city: 'Taichung'
      }
    };
  } else if (id === 'olek' || id === 420) {
    key = '420';
    o = {
      vanity: 'Olek',
      location: {
        coutry: 'Poland',
        city: 'Olsztyn'
      }
    };
  } else {
    key = id;
    o = {
      phone: '+1 234 56789',
      location: {
        country: 'Neverland',
        city: 'Neversea'
      }
    };
  }
  o.id = getHash(key);
  return res.jsonp(o);
});

updaters = {
  vanity: function(key, newValue, cb) {
    return cb(null, 'vanity');
  },
  phone: function(key, newValue, cb) {
    return cb(null, 'phone');
  },
  location: function(key, newValue, cb) {
    return cb(null, 'location');
  }
};

app.post('/update', function(req, res) {
  var fn, key, name, queue, val;
  key = req.body.key;
  if (!key) {
    res.json({
      error: ['"key" missing']
    });
    return;
  }
  fn = function(name, key, newValue) {
    return function(cb) {
      return updaters[name](key, newValue, cb);
    };
  };
  queue = [];
  for (name in updaters) {
    val = req.body[name];
    if (val) {
      queue.push(fn(name, key, val));
    }
  }
  return async.parallel(queue, function(err, results) {
    return res.json(200, {
      id: getHash(key),
      updated: results
    });
  });
});

app.listen();
